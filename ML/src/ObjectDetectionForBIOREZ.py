# -*- coding: utf-8 -*-
"""YOLO (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h7x-_L60SNomB9R-TGLUekWduzq0rOlN
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install ultralytics

from google.colab import drive
drive.mount('/content/drive')

import os
from ultralytics import YOLO
import shutil
from tqdm import tqdm
import yaml
import random
from PIL import Image
import torch
import zipfile

"""## Data Preparation"""

zipref = zipfile.ZipFile("/content/drive/MyDrive/YOLO/train.zip", 'r')
zipref.extractall("/content/YOLO")
zipref.close()

roots = '/content/YOLO'

yolo_dataset_root = os.path.join(roots, 'yolo_formatted_dataset')
os.makedirs(yolo_dataset_root, exist_ok=True)

yolo_train_images_dir = os.path.join(yolo_dataset_root, 'images', 'train')
yolo_val_images_dir = os.path.join(yolo_dataset_root, 'images', 'val')
yolo_train_labels_dir = os.path.join(yolo_dataset_root, 'labels', 'train')
yolo_val_labels_dir = os.path.join(yolo_dataset_root, 'labels', 'val')

os.makedirs(yolo_train_images_dir, exist_ok=True)
os.makedirs(yolo_val_images_dir, exist_ok=True)
os.makedirs(yolo_train_labels_dir, exist_ok=True)
os.makedirs(yolo_val_labels_dir, exist_ok=True)

class_names = ['Organik', 'Anorganik']
class_to_id = {name: i for i, name in enumerate(class_names)}
id_to_class = {i: name for i, name in enumerate(class_names)}

print(f"Nama kelas yang terdeteksi: {class_names}")
print(f"Mapping kelas ke ID: {class_to_id}")

all_image_paths = []
all_label_paths = []
for category in ['organik', 'anorganik']:
    category_images_dir = os.path.join(roots, 'train', category)
    category_labels_dir = os.path.join(roots, 'train', category, 'labels')

    if not os.path.exists(category_images_dir) or not os.path.exists(category_labels_dir):
        print(f"Peringatan: Folder '{category_images_dir}' atau '{category_labels_dir}' tidak ditemukan. Melewatkan kategori ini.")
        continue

    for img_name in os.listdir(category_images_dir):
        if img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
            image_path = os.path.join(category_images_dir, img_name)

            # Ganti ekstensi gambar dengan .txt untuk mendapatkan nama file label yang diharapkan
            label_name = os.path.splitext(img_name)[0] + '.txt'
            label_path = os.path.join(category_labels_dir, label_name)

            if os.path.exists(label_path):
                all_image_paths.append(image_path)
                all_label_paths.append(label_path)
            else:
                print(f"Peringatan: Label tidak ditemukan untuk gambar {image_path}. Melewatkan pasangan ini.")

print(f"\nTotal pasangan gambar-label yang ditemukan: {len(all_image_paths)}")

data_pairs = list(zip(all_image_paths, all_label_paths))

random.shuffle(data_pairs)

"""### Split Data"""

train_ratio = 0.8
split_index = int(len(data_pairs) * train_ratio)

train_data = data_pairs[:split_index]
val_data = data_pairs[split_index:]

print(f"Jumlah data pelatihan: {len(train_data)}")
print(f"Jumlah data validasi: {len(val_data)}")

# Salin file ke struktur YOLOv8
print("\nMenyalin file ke folder pelatihan...")
for original_img_path, original_label_path in tqdm(train_data, desc="Memproses data train"):
    img_name = os.path.basename(original_img_path)
    label_name = os.path.basename(original_label_path)

    shutil.copy(original_img_path, os.path.join(yolo_train_images_dir, img_name))
    shutil.copy(original_label_path, os.path.join(yolo_train_labels_dir, label_name))

print("\nMenyalin file ke folder validasi...")
for original_img_path, original_label_path in tqdm(val_data, desc="Memproses data val"):
    img_name = os.path.basename(original_img_path)
    label_name = os.path.basename(original_label_path)

    shutil.copy(original_img_path, os.path.join(yolo_val_images_dir, img_name))
    shutil.copy(original_label_path, os.path.join(yolo_val_labels_dir, label_name))

print("\nPenyalinan dataset selesai!")

classes_file_path = os.path.join(yolo_dataset_root, 'classes.txt')
with open(classes_file_path, 'w') as f:
    for cls_name in class_names:
        f.write(f"{cls_name}\n")
print(f"File classes.txt berhasil dibuat di {classes_file_path}")

"""## Konfigurasi data"""

yolo_dataset_root = os.path.join(roots, 'yolo_formatted_dataset')

with open(os.path.join(yolo_dataset_root, 'classes.txt'), 'r') as f:
    names = [line.strip() for line in f.readlines()]

nc = len(names)

data_config = {
    'path': yolo_dataset_root,
    'train': 'images/train',
    'val': 'images/val',
    'nc': nc,
    'names': names
}

# Simpan konfigurasi ke file data.yaml
data_yaml_path = os.path.join(yolo_dataset_root, 'data.yaml')
with open(data_yaml_path, 'w') as f:
    yaml.dump(data_config, f, sort_keys=False)

print(f"File konfigurasi dataset '{data_yaml_path}' berhasil dibuat.")
print("Isi file data.yaml:")
with open(data_yaml_path, 'r') as f:
    print(f.read())

"""## Modeling"""

model = YOLO('yolov8n.pt')

data_yaml_path = os.path.join(yolo_dataset_root, 'data.yaml')

print(f"Apakah CUDA tersedia: {torch.cuda.is_available()}")
device = '0' if torch.cuda.is_available() else 'cpu'
print(f"Menggunakan perangkat: {device}")

# Latih model
results = model.train(
    data=data_yaml_path,
    epochs=50,
    imgsz=640,
    batch=16,
    name='yolov8_waste+',
    device=device,
)

print("\nPelatihan selesai!")
print(f"Bobot model terbaik disimpan di: {model.trainer.save_dir}/weights/best.pt")

"""## Validasi Model"""

model_path = os.path.join(model.trainer.save_dir, 'weights', 'best.pt')
model = YOLO(model_path)

metrics = model.val(data=data_yaml_path, imgsz=640, batch=16)
print("\nHasil Validasi:")
print(f"mAP50-95: {metrics.box.map}")
print(f"mAP50: {metrics.box.map50}")
print(f"mAP75: {metrics.box.map75}")
print(f"Presisi: {metrics.box.p}")
print(f"Recall: {metrics.box.r}")

"""### test prediksi pada gambar baru"""

test_image_path = '/content/tst1.jpg'

if not os.path.exists(test_image_path):
    print(f"Error: Gambar uji tidak ditemukan di {test_image_path}")
    print("Pastikan Anda mengganti 'test_image_path' dengan path yang benar.")
else:

    results = model(test_image_path)
    from IPython.display import Image, display

    for i, r in enumerate(results):
        os.makedirs('predictions', exist_ok=True)
        plot_path = os.path.join('predictions', f'test_image_prediction_{i}.jpg')

        r.save(filename=plot_path)
        print(f"Hasil prediksi disimpan di: {plot_path}")
        display(Image(filename=plot_path))

        boxes = r.boxes.xyxy.tolist()
        confidences = r.boxes.conf.tolist()
        class_ids = r.boxes.cls.tolist()

        print(f"\nDeteksi untuk gambar {test_image_path}:")
        for j in range(len(boxes)):
            class_name = model.names[int(class_ids[j])]
            print(f"  Objek: {class_name}, Kepercayaan: {confidences[j]:.2f}, Box: {boxes[j]}")

"""## Save Models"""

export_path = model.export(format='onnx')

print(f"Model berhasil diekspor ke: {export_path}")